---
import Head from '$components/head.astro'
import { getBackend } from '$functions/getBackend'
import {
  OAuthClientConfig,
  isSensitiveScope,
  oauthClients,
} from '$constants/oauth'
import { IdTokenInspector } from '$components/idTokenInspector'
import Blank from '$layouts/blank.astro'

const authenticatedUser = await getBackend(
  Astro
).auth.getAuthenticatedUser.query()

if (!authenticatedUser) {
  const url = `/auth/login?${new URLSearchParams({
    dest: Astro.url.pathname + Astro.url.search,
  })}`
  return Astro.redirect(url)
}

let trustedClient: OAuthClientConfig | undefined
let untrustedReason = 'The provided client_id is not recognized'

const clientId = Astro.url.searchParams.get('client_id') ?? ''
const state = Astro.url.searchParams.get('state') ?? ''
const scope = Astro.url.searchParams.get('scope') ?? ''
const scopes = scope.split(' ').filter(Boolean)
const client = oauthClients.find(c => c.clientId === clientId)
const redirectUri = Astro.url.searchParams.get('redirect_uri') ?? ''
if (client) {
  if (client.redirectUris.includes(redirectUri)) {
    const unallowedSensitiveScopes: string[] = []
    for (const scopeName of scopes) {
      if (
        isSensitiveScope(scopeName) &&
        !(client.allowedScopes ?? ([] as string[])).includes(scopeName)
      ) {
        unallowedSensitiveScopes.push(scopeName)
      }
    }
    if (unallowedSensitiveScopes.length === 0) {
      trustedClient = client
    } else {
      const list = unallowedSensitiveScopes.map(s => `"${s}"`).join(', ')
      untrustedReason = `The application requested access to sensitive scopes (${list}) that it is not allowed to access`
    }
  } else {
    untrustedReason = 'The provided redirect_uri is not recognized'
  }
}

const nonce = Astro.url.searchParams.get('nonce') ?? undefined
const idTokenInfo = await getBackend(Astro).auth.mintIdToken.mutate({
  audience: clientId,
  scopes,
  nonce,
})

const redirectTo = new URL(redirectUri)
redirectTo.searchParams.set('id_token', idTokenInfo.idToken)
redirectTo.searchParams.set('state', state)

if (redirectTo.protocol !== 'https:' && redirectTo.protocol !== 'http:') {
  return errorPage(
    400,
    'Bad Request',
    'Invalid redirect_uri - only http and https are supported'
  )
}
---

<Head title="Authgarten" />

<Blank>
  <Fragment slot="head">
    <title>Authgarten</title>
    {
      !!trustedClient && (
        <meta http-equiv="Refresh" content={'1; url=' + redirectTo} />
      )
    }
  </Fragment>
  <main class="px-4 max-w-7xl mx-auto py-12">
    {
      trustedClient ? (
        <>
          <h1 class="mb-4 text-4xl font-medium">Redirecting…</h1>
          <p>
            Redirecting you to <strong>{trustedClient.name}</strong>…
          </p>
          <p>
            <a href={redirectTo} class="underline">
              Click here
            </a>{' '}
            if nothing happens
          </p>
        </>
      ) : (
        <>
          <h1 class="mb-4 text-4xl font-medium">Data access request</h1>
          <p class="mb-3">
            A third-party application at <strong>{redirectTo.origin}</strong>{' '}
            would like to access information in your Creatorsgarten account.
          </p>
          <p class="mb-3">The following information will be shared:</p>
          <div class="mb-3">
            <IdTokenInspector claims={idTokenInfo.claims} />
          </div>
          <p class="mb-3">
            If you trust this application, click the button below to send the
            information:
          </p>
          <a
            href={redirectTo}
            class="inline-flex w-full shrink-0 justify-center rounded-lg bg-[#1c1916] px-4 py-2 text-white sm:w-auto sm:rounded-full"
          >
            Send information and continue
          </a>
          <div class="hidden">Untrusted reason: {untrustedReason}</div>
        </>
      )
    }
  </main>
</Blank>
