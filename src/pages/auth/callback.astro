---
import CSRF from 'csrf'

const state = Astro.url.searchParams.get('state')
const code = Astro.url.searchParams.get('code')

let error = ''

try {
  // decode authentication state
  const stateMatcher = (state ?? '').match(/^(\w+)-(.+)/)

  if (stateMatcher === null)
    throw new Error('state-invalid')
  
  const [, service, csrfToken] = stateMatcher

  // if local state, then foward to localhost
  if (csrfToken === 'local' && import.meta.env.PROD) {
    return Astro.redirect(`http://localhost:3000/auth/callback?${new URLSearchParams({
      code: code ?? '',
      state: state ?? '',
    }).toString()}`)
  }

  // verify csrf that it comes from our platform
  if (
    !(csrfToken === 'local' && !import.meta.env.PROD) ||
    !new CSRF().verify(import.meta.env.CSRF_SECRET, csrfToken)
  )
    throw new Error('csrf-verification-fail')

  // handle authtication from here
  switch (service) {
    case 'eventpop':
      throw new Error('to-be-implemented')
    case 'github':
      throw new Error('to-be-implemented')
  }
} catch (e) {
  error = (e as Error).message
}
---

<p>{code}</p>
