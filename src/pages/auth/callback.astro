---
import { authenticateEventpopUser } from '$functions/auth/authenticateEventpopUser'
import CSRF from 'csrf'

const code =
  Astro.url.searchParams.get('code') ??
  ((await Astro.request.formData()).get('code') as string) ??
  ''
const state =
  Astro.url.searchParams.get('state') ??
  ((await Astro.request.formData()).get('state') as string) ??
  ''

console.log(state)

let error: string | null = null

try {
  // decode authentication state
  const stateMatcher = (state ?? '').match(/^(localhost3000|new)!(\w+)-(.+)$/)

  if (stateMatcher === null) throw new Error('state-invalid')

  const [, redirectHint, service, csrfToken] = stateMatcher

  // if local state, then foward to localhost
  if (redirectHint === 'localhost3000' && import.meta.env.PROD) {
    return Astro.redirect(
      `http://localhost:3000/auth/callback?${new URLSearchParams({
        code: code ?? '',
        state: state ?? '',
      }).toString()}`
    )
  } else if (redirectHint !== 'new' && import.meta.env.PROD) {
    throw new Error('redirect-hint-invalid')
  }

  // verify csrf that it comes from our platform
  if (!new CSRF().verify(import.meta.env.CSRF_SECRET, csrfToken))
    throw new Error('csrf-verification-fail')

  // handle authtication from here
  switch (service) {
    case 'eventpop':
      await authenticateEventpopUser(code, Astro)
    case 'github':
      throw new Error('to-be-implemented')
  }
} catch (e) {
  error = (e as Error).message
}
---

<p>{error ?? code}</p>
